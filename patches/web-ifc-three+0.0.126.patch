diff --git a/node_modules/web-ifc-three/IFCLoader.js b/node_modules/web-ifc-three/IFCLoader.js
index 1e86ae7..6ad6212 100644
--- a/node_modules/web-ifc-three/IFCLoader.js
+++ b/node_modules/web-ifc-three/IFCLoader.js
@@ -1,7 +1,7 @@
 import * as WebIFC from 'web-ifc';
 import { IFCSPACE, IFCOPENINGELEMENT, IFCPRODUCTDEFINITIONSHAPE, IFCRELAGGREGATES, IFCRELCONTAINEDINSPATIALSTRUCTURE, IFCRELDEFINESBYPROPERTIES, IFCRELASSOCIATESMATERIAL, IFCRELDEFINESBYTYPE, IFCPROJECT, IFCBUILDING } from 'web-ifc';
 import { Mesh, Color, MeshLambertMaterial, DoubleSide, Matrix4, BufferGeometry, BufferAttribute, Loader, FileLoader } from 'three';
-import { mergeGeometries } from 'three/examples/jsm/utils/BufferGeometryUtils';
+import { mergeBufferGeometries } from 'three/examples/jsm/utils/BufferGeometryUtils.js';
 
 const nullIfcManagerErrorMessage = 'IfcManager is null!';
 
@@ -171,11 +171,11 @@ class IFCParser {
     const materials = [];
     Object.keys(this.geometriesByMaterials).forEach((key) => {
       const geometriesByMaterial = this.geometriesByMaterials[key].geometries;
-      const merged = mergeGeometries(geometriesByMaterial);
+      const merged = mergeBufferGeometries(geometriesByMaterial);
       materials.push(this.geometriesByMaterials[key].material);
       geometries.push(merged);
     });
-    const combinedGeometry = mergeGeometries(geometries, true);
+    const combinedGeometry = mergeBufferGeometries(geometries, true);
     this.cleanUpGeometryMemory(geometries);
     if (this.BVH)
       this.BVH.applyThreeMeshBVH(combinedGeometry);
